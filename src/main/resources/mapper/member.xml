<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gabojago.gabojago.model.mapper.MemberMapper">
	<!-- 로그인 결과 담을 resultMap -->
	<resultMap type="memberDto" id="member">
		<result column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
	</resultMap>
	
	<!-- mypage에 출력할 내 정보를 담을 resultMap -->
	<resultMap type="memberDto" id="MyPageInfo">
		<result column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
		<result column="email_id" property="emailId"/>
		<result column="email_domain" property="emailDomain"/>
		<result column="join_date" property="joinDate"/>
		<result column="phone_number" property="userPhonNum"/>
		<result column="slogun" property="slogun"/>
		<result column="profile_img" property="profileImg"/>
		<result column="like_boards" property="likeBoards"/>
		<result column="like_attractions" property="likeAttractions"/>
	</resultMap>
	
	<!-- 내가 쓴 핫플레이스 담을 resultMap -->
	<resultMap type="UserBoardDto" id="Myboards">
		<result column="article_no" property="articleNo"/>
		<result column="user_id" property="userId"/>
		<result column="subject" property="subject"/>
		<result column="content" property="content"/>
		<result column="hit" property="hit"/>
		<result column="register_time" property="registerTime"/>
		<result column="imgs_is_exist" property="imgsIsExist"/>
		<result column="img_slide_num" property="imgSlideNum"/>
		<result column="comments_cnt" property="commentCnt"/>
		<result column="like_cnt" property="likeCnt"/>
	</resultMap>
	
	<!-- 게시글 이미지들 담을 resultMap -->
	<resultMap type="ImgInfos" id="imgs">
		<result column="article_no" property="articleNo"/>
		<result column="img_blob" property="imgBlob"/>
	</resultMap>
	
	<!-- 입력 ID에 해당하는 SALT값 가져오기 -->
	<select id="findSalt" parameterType="string" resultType="String">
		select salt
		from members
		where user_id = #{userId}
	</select>
	
	<!-- 로그인 -->
	<select id="loginMember" parameterType="map" resultMap="member">
		select user_id, user_name
		from members
		where user_id = #{userid} and user_password = #{userpwd}
	</select>
	
	<!-- 아이디 중복 확인 -->
	<select id="idCheck" parameterType="String" resultType="int">
		select count(user_id)
		from members
		where user_id = #{userId}
	</select>
	
	<!-- 회원가입 -->
	<insert id="joinMember" parameterType="memberDto">
		insert into members (user_id, user_name, user_password, email_id, email_domain, phone_number, salt) 
		values (#{userId}, #{userName}, #{userPwd}, #{emailId}, #{emailDomain}, #{userPhonNum}, #{salt})
	</insert>
	
	<!-- 아이디 찾기! -->
	<select id="findId" parameterType="map" resultType="String">
		select user_id
		from members
		where user_name = #{userName} and email_id = #{emailId} and email_domain = #{emailDomain} and phone_number = #{userPhonNum}
	</select>
	
	<!-- 비밀번호 찾기! -->
	<select id="findPwd" parameterType="map" resultType="String">
		select user_id
		from members
		where user_name = #{userName} and email_id = #{emailId} and email_domain = #{emailDomain} and user_id = #{userId}
	</select>
	
	<!-- 비밀번호 재설정 -->
	<update id="modifyPwd" parameterType="map">
		update members
		set user_password = #{userPwd}, salt = #{salt}
		where user_id = #{userId}
	</update>
	
	<!-- 현재 로그인 회원 정보 가져오기 -->
	<select id="showMyInfo" parameterType="String" resultMap="MyPageInfo">
		select user_id, user_name, email_id, email_domain, join_date, phone_number, slogun, profile_img, like_boards, like_attractions
		from members
		where user_id = #{userid}
	</select>
	
	<!-- 비밀번호 확인 -->
	<select id="checkPwd" parameterType="map" resultType="int">
		select count(user_id)
		from members
		where user_id = #{userId} and user_password = #{userPwd}
	</select>
	
	<!-- 계정삭제 -->
	<delete id="rmAccount" parameterType="String">
		delete from members
		where user_id = #{userId}
	</delete>
	
	<!-- 계정정보 업데이트 -->
	<update id="updateInfo" parameterType="map">
		update members
		set salt = #{salt}, user_name = #{userName}, user_password = #{userPwd}, email_id = #{emailId}, email_domain = #{emailDomain}, phone_number = #{userPhonNum}
		where user_id = #{userId}
	</update>
			
	<!-- 내가 쓴 작성글 불러오기 -->
	<select id="getmyBoards" parameterType="String" resultMap="Myboards">
		select *
		from boards
		where user_id = #{userid} and type = "U"
		order by article_no desc
	</select>
	
	<!-- 내가 등록한 이미지 불러오기 -->
	<select id="getMyImgs" parameterType="String" resultMap="imgs">
		select article_no, img_blob
		from board_img
		where article_no in( select article_no
					from boards
                    where `type` = 'U' and user_id = #{userid});
	</select>
	
	<!-- 내 프로필사진 수정 -->
	<update id="modifyProfile" parameterType="map">
		update members
		set profile_img = #{profileImg} 
		where user_id = #{userId}
	</update>
	
	<!-- 내가 좋아요 누른 게시글 정보 업데이트 -->
	<update id="updateLike" parameterType="map">
		update members
		set like_boards = #{likeBoards}
		where user_id = #{userId}
	</update>
	
	<!-- 좋아요 변동 후 게시글 좋아요 수 업데이트 -->
	<update id="updateLikeCnt" parameterType="map">
		update boards
		set like_cnt = #{likeCnt}
		where article_no = #{articleNo}
	</update>
	
	<!-- 리프레시토큰저장 -->
	<update id="saveRefreshToken" parameterType="map">
		update members
		set token = #{token}
		where user_id = #{userid}
	</update>
	
	<!-- 리프레시토큰가져오기 -->
	<select id="getRefreshToken" parameterType="string" resultType="string">
		select token
		from members
		where user_id = #{userid}
	</select>
	
	<!-- 리프레시토큰삭제 -->
	<update id="deleteRefreshToken" parameterType="map">
		update members
		set token = #{token, jdbcType=VARCHAR}
		where user_id = #{userid}
	</update>
</mapper>